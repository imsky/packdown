#!/usr/bin/env node

var fs = require('fs');

var promise = require('bluebird');
var pluralize = require('pluralize');
var program = require('commander');

var package = require('../package');
var compress = require('../lib/commands/compress');
var extract = require('../lib/commands/extract');
var remove = require('../lib/commands/remove');

program.version(package.version);

program
  .command('compress <input> [output]')
  .action(function (input, output) {
    compress(input, output)
      .then(function (res) {
        if (!output) {
          console.log(res);
        }
      });
  });

program
  .command('extract <input> <output>')
  .option('-v --vars', 'Template with variables')
  .action(function (input, output, options) {
    function action (_input, _output) {
      extract(_input, _output, options.vars)
        .then(function (files) {
          console.log(pluralize('file', files, true) + ' extracted');
        })
        .catch(function (e) {
          console.error('Error extracting files');
          throw e;
        });
    }

    if (input === '-' && !process.stdin.isTTY) {
      var stdin = [];

      process.stdin.on('readable', function () {
        var buffer = this.read();

        if (buffer) {
          stdin.push(buffer);
        }
      });

      process.stdin.on('end', function () {
        stdin = Buffer.concat(stdin);
        action(stdin.toString('utf8'), output || 'stdin');
      });
    } else {
      action(input, output);
    }
  });

program
  .command('remove <file> <document>')
  .action(function (file, document) {
    remove(file, document)
      .then(function (res) {
        if (res.status === 'not found') {
          console.log(file + ' not found');
        } else if (res.status === 'removed') {
          console.log(file + ' removed');
        }
      });
  });

program.on('--help', function () {
  var help = [
      '  Examples:',
      '    compress <input> [output]',
      '      $ packdown compress foo bar  # compresses foo dir into bar file',
      '      $ packdown compress foo      # compresses foo dir, sends to stdout',
      '    extract [options] <input> <output>',
      '      $ packdown extract foo bar   # extracts foo file into bar directory',
      '      # templates foo file with vars.json, then extracts into bar directory',
      '      $ packdown extract -v vars.json foo bar',
      '    remove <file> <document>',
      '      $ packdown remove foo bar    # removes /foo path from bar document'
    ];
  console.log(help.join('\n'));
})

if (process.argv.slice(2).length) {
  program.parse(process.argv);
} else {
  program.help();
}
